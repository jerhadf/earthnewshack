// add item to database

// `friends` table doesn't exist.
await db.insert("friends", { name: "Jamie" });
// Now it does, and it has one document.

// tables contain documents - here are examples of document
// {}
// {"name": "Jamie"}
// {"name": {"first": "Arnold", "second": "Cole": 61}

// document format for our purposes, using the fields - id,body,headline,article_name,date_published,date_uploaded,summary,explanation,address,lat,lon
document = {
  article_id: {
    body: "body",
    headline: "headline",
    article_name: "article_name",
    date_published: "date_published",
    date_uploaded: "date_uploaded",
    summary: "summary",
    explanation: "explanation",
    address: "address",
    lat: "lat",
    lon: "lon",
  },
};

// given a single document's ID, read its data with db.get
export default query(async ({ db }, { taskId }) => {
  const task = await db.get(taskId);

  // using the Convex framework and the document format above, get the latitude and longitude of a document
  const task2 = await db.get(taskId);
  return task.lat + "," + task.lon;
});

// you can then filter, order, and await the results - see https://docs.convex.dev/database/reading-data

// use db.insert to add things 

// Every document in convex has a globally unique document ID that is automatically generated by the system. 
// access the id with the _id field 

// You can use this ID to always issue a very efficient point query within your functions using the get method:
const retrievedUser = await db.get(documentId); 

// allow users to upload files and images and articles with HTTP endpoint 

